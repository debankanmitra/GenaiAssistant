from fastapi import FastAPI, Request, Response
from fastapi.responses import StreamingResponse
from legalassistant import query_from_model

app = FastAPI()

async def generate_event(data):

    data=query_from_model(data)
        # In Python, the yield keyword is used in generator functions to 
        # define a point at which the function can temporarily suspend its 
        # execution and yield a value to the caller. When the function encounters a 
        # yield statement, it returns the yielded value and saves its state. 
        # The next time the function is called, it resumes execution from where 
        # it left off, allowing the caller to iterate over the values generated by 
        # the function one at a time. In the provided code snippet, yield data is 
        # used to yield the generated event data to the caller.
    yield f"{data} \n"
        # Wait for a second before sending the next event
        # time.sleep(1)

@app.post("/events")
async def get_events(request: Request, response: Response):
    response.headers["Content-Type"] = "text/event-stream"
    async for chunk in request.stream():
        # Read data sent by the client
        data = chunk.decode()
        print(data)
    # StreamingResponse in FastAPI is a class used to create a streaming HTTP response. 
    # It's particularly useful when you want to send data to the client continuously, as in the case of 
    # server-sent events or streaming large files without loading them entirely into memory.
        res= StreamingResponse(generate_event(data), media_type="text/event-stream")
        return res
